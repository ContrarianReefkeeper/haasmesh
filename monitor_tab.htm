<%+header%>                                                                    
<h2><%:Maxwell Mesh Monitor%></h2>
<br>
<!-- <p><h3><a href="../system/commands"> Commands page </a></h3></p> -->

<h3>Mesh nodes and internet connection <input id="buttonNodes" type="button" onclick="noderefresh()"> </h3>
<p id="internet">Internet connection status will go here</p>
<p id="nodes">Nodes will go here</p>
<br>

<h3>Test download of 10 MB from internet <input id="buttonDownload" type="button" onclick="myDownload()" value="Run"> </h3>
<pre id="download">Test download result here</pre>
<br>

<h3>Speedtest of internet <input type="button" onclick="mySpeedtest()" value="Run"> </h3>
<pre id="speedtest">Speedtest result here</pre>
<br>

<h3>Bandwidth between me and each node <input type="button" onclick="myBandwidth()" value="Run"> </h3>
<pre id="bandwidth">Bandwidth result here</pre>

<br>
<h3>Super-cool network map <input type="button" onclick="myMap()" value="Run"> </h3>
<div id="map"><pre>Map link will appear here</pre></div>

<br>
<h3>Trace of path to each node <input type="button" onclick="myTraceall()" value="Run"> </h3>
<pre id="traceall">Output will go here</pre>

<br>
<h3>Routing decision table for this node <input id="buttonBatctlo" type="button" onclick="myBatctlo()" value="Run"> </h3>
<pre id="batctlo">Output will go here</pre>

<br>
<h3>Tails of mesh node logs <input type="button" onclick="myLogtails()" value="Run"> </h3>
<pre id="logtails">Output will go here</pre>

<br>
<h3>Modify mesh node setup</h3>
<form >
  <label for="nodepass">Root Login Password:</label> 
  <input type="text" id="nodepass" value=""> <input type="button" value="Change Root Login Password" onclick="changenodepass()" ><br><br>
  <label for="apchange">Access Point SSID and Password:</label> 
  <input type="text" id="apssid" value="">  <input type="text" id="appass" value=""> <input type="button" value="Change Access Point SSID and Password" onclick="changeapssidpass()" ><br><br>
  <label for="messchange">Hidden Mesh Name and Password:</label> 
  <input type="text" id="meshname" value="">  <input type="text" id="meshpass" value=""> <input type="button" value="Change Hidden Mesh Name and Password" onclick="changemeshnamepass()" ><br>
</form>
<pre id="commandout">Command output here</pre>

<br>
<h3>Other misc setup</h3>
<form >
  <input type="button" value="Update these scripts from github" onclick="updatehaasmesh()"> <input type="button" value="Rotate Luma ethernet ports" onclick="rotatelumaeth()">
  <br>
</form>
<pre id="othercommandout">Command output here</pre>

<br>

<script>
window.onload = onLoad();
var noderefreshtimer
var noderefreshing
function onLoad(){
  noderefreshing=0
  noderefresh()
  postcmdval("/root/script/getapssid.sh","apssid")
  postcmdval("/root/script/getmeshname.sh","meshname")
}
function noderefresh(){
  if (noderefreshing){
  noderefreshing=0
  clearInterval(noderefreshtimer)
  document.getElementById("buttonNodes").value="Start refreshing"
  } 
  else {
  noderefreshing=1
  myNodes()
  document.getElementById("buttonNodes").value="Stop refreshing"
  noderefreshtimer = setInterval(myNodes,30000)
  }
}

function changenodepass(){
  if (confirm("Do you really want to change the root login password?")){
  document.getElementById("commandout").innerHTML="working...";
  postcmd("/root/script/setpasswds.sh "+document.getElementById("nodepass").value,"commandout");
  }
}
function changeapssidpass(){
  if (confirm("Do you really want to change the access point SSID and password?")){
  document.getElementById("commandout").innerHTML="working...";
  postcmd("/root/script/setapssidpw.sh "+document.getElementById("apssid").value+" "+document.getElementById("appass").value,"commandout");
  }
}
function changemeshnamepass(){
  if (confirm("Do you really want to change the hidden mesh name and password?")){
  document.getElementById("commandout").innerHTML="working...";
  postcmd("/root/script/setmeshssidpw.sh "+document.getElementById("meshname").value+" "+document.getElementById("meshpass").value,"commandout");
  }
}

function myNodes() {
  document.getElementById("internet").innerHTML="working...";
  postcmd("/root/script/internethtml.sh","internet");
  document.getElementById("nodes").innerHTML="working...";
  postcmd("/root/script/nodeshtml.sh","nodes");
}
function removeNode(n) {
  if (confirm("Do you really want to forget about node "+n+"?")){
    postcmd("/root/script/removenode.sh "+n,"nodes");
    //postcmd("/root/script/nodeshtml.sh","nodes");
  }
}

function myTraceall() {
  document.getElementById("traceall").innerHTML="working...";
  postcmd("/root/script/traceall.sh","traceall");
}
function myBatctlo() {
  document.getElementById("batctlo").innerHTML="working...";
  postcmd("/root/script/batctlo.sh","batctlo");
}
function myDownload() {
  document.getElementById("download").innerHTML="working...";
  postcmd("/root/script/speed_download.sh","download");
}
function mySpeedtest() {
  document.getElementById("speedtest").innerHTML="working...";
  postcmd("/root/script/speedtest.sh","speedtest");
}
function myBandwidth() {
  document.getElementById("bandwidth").innerHTML="working...";
  postcmd("/root/script/speednodes.sh","bandwidth");
}

function rotatelumaeth() {
  if (confirm("Do you really want to rotate the Luma ethernet ports on this node?")){ 
    document.getElementById("othercommandout").innerHTML="working...";
    postcmd("/root/script/rotatelumaeth.sh","othercommandout");
  }
}
function updatehaasmesh() {
  if (confirm("Do you really want to update the scripts (on all nodes if this is a hub!)?")){ 
    document.getElementById("othercommandout").innerHTML="working...";
    postcmd("/root/script/foreachnodeparallel.sh \" /root/script/updatehaasmesh.sh \" ","othercommandout");
  }
}

function myLogtails() {
  document.getElementById("logtails").innerHTML="working...";
  postcmd("/root/script/foreachnode.sh \"logread|tail\" ","logtails");
}
function myMap() {
  document.getElementById("map").innerHTML="working...";
  postcmd("/root/script/makebatmap.sh","map");
}

function postcmd(cmd,elem) {
    (new XHR()).post("<%=luci.dispatcher.build_url("admin", "haas_mesh_tab", "webcmd")%>", {"cmd":cmd}, function(x) {
        document.getElementById(elem).innerHTML = x.response ;
    });
}
function postcmdval(cmd,elem) {
    (new XHR()).post("<%=luci.dispatcher.build_url("admin", "haas_mesh_tab", "webcmd")%>", {"cmd":cmd}, function(x) {
        document.getElementById(elem).value = x.response ;
    });
}

</script>

<style>
.reddot {
  height: 15px;
  width: 15px;
  background-color: #d00;
  border-radius: 50%;
  display: inline-block;
}
</style>

<style>
.yellodot {
  height: 15px;
  width: 15px;
  background-color: #dd0;
  border-radius: 50%;
  display: inline-block;
}
</style>

<style>
.greendot {
  height: 15px;
  width: 15px;
  background-color: #0d0;
  border-radius: 50%;
  display: inline-block;
}
</style>

<style>
table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: center;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}
</style>

<%+footer%>

